%-----------------------------------------

%-----------------------------------------

import os
import itertools

# Nutze die gleichen Atome/Metalle wie im Hauptcode
atoms = ["C", "H", "N", "S", "O", "P", "Cl", 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'Os', 'Ir', 'Pt', 'Au', 'Hg']
non_metals = ["C", "H", "N", "S", "O", "P", "Cl"]
metals = [a for a in atoms if a not in non_metals]
multi_letter_atoms = ['Cl', 'Br', 'Sc', 'Ti', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd',
    'La', 'Hf', 'Ta', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg']

os.makedirs("Plots", exist_ok=True)

progress_file_bonds = "progress_bonds.txt"
plots_per_run_bonds = 10  # Passe ggf. an

# Fortschritt laden
start_idx_bonds = 0
if os.path.exists(progress_file_bonds):
    with open(progress_file_bonds, "r") as f:
        start_idx_bonds = int(f.read().strip())

# Nur Bindungen (2 Atome)
combos_bonds = []
n = 2
for metal in metals:
    for metal_pos in range(n):
        for non_metal_combo in itertools.product(non_metals, repeat=n-1):
            combo = list(non_metal_combo)
            combo.insert(metal_pos, metal)
            selected_atoms = "".join(combo)
            combos_bonds.append(selected_atoms)

# Blockweise abarbeiten, Fortschritt robust speichern
for idx, selected_atoms in enumerate(combos_bonds[start_idx_bonds:], start=start_idx_bonds):
    # Fortschritt speichern VOR dem Plotten, robust auf Festplatte schreiben
    with open(progress_file_bonds, "w") as f:
        f.write(str(idx))
        f.flush()
        os.fsync(f.fileno())
    try_draw_and_save(selected_atoms)
    if (idx - start_idx_bonds + 1) >= plots_per_run_bonds:
        print(f"Blocklimit {plots_per_run_bonds} erreicht. Fortschritt gespeichert bei Index {idx+1}.")
        break

%-----------------------------------------------

%-----------------------------------------------

import os
import numpy as np

dicts = [
    ("Bindung", cleaned_CCDC_bonds, cleaned_GOAT_bonds, cleaned_OMol25_bonds, "Bindungen"),
    ("Winkel", cleaned_CCDC_angles, cleaned_GOAT_angles, {}, "Winkel"),
    ("Torsion", cleaned_CCDC_torsions, cleaned_GOAT_torsions, {}, "Torsionen"),
]

multi_letter_atoms = [
    'Cl', 'Br', 'Sc', 'Ti', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd',
    'La', 'Hf', 'Ta', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg'
]

def safe_len(x):
    try:
        return len(x)
    except Exception:
        return 0

def get_metal_from_combo(selected_atoms, metals):
    i = 0
    while i < len(selected_atoms):
        if i+1 < len(selected_atoms) and selected_atoms[i:i+2] in metals:
            return selected_atoms[i:i+2]
        elif selected_atoms[i] in metals:
            return selected_atoms[i]
        i += 1
    return "Unknown"

def overlap_count(list1, list2, tol=1e-3):
    if len(list1) == 0 or len(list2) == 0:
        return 0
    arr2 = np.array(list2)
    count = 0
    for v in list1:
        if np.any(np.isclose(v, arr2, atol=tol)):
            count += 1
    return count

progress_file_stats = "progress_stats.txt"
stats_per_run = 100

metals = ['Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'Os', 'Ir', 'Pt', 'Au', 'Hg']

# Fortschritt laden
start_idx_stats = 0
if os.path.exists(progress_file_stats):
    with open(progress_file_stats, "r") as f:
        try:
            start_idx_stats = int(f.read().strip())
        except Exception:
            start_idx_stats = 0

try:
    with open("Plots/vergleich_statistiken.txt", "a") as f:
        counter = 0
        finished = True
        for typ, csd_dict, goat_dict, omol_dict, subfolder in dicts:
            all_keys = sorted(set(csd_dict.keys()) | set(goat_dict.keys()) | set(omol_dict.keys()))
            # Nur Keys, für die ein Plot existiert:
            keys_with_plot = []
            for key in all_keys:
                metal = get_metal_from_combo(key, metals)
                plot_path = os.path.join("Plots", metal, subfolder, f"{key}.png")
                if os.path.exists(plot_path):
                    keys_with_plot.append(key)
            total_keys = len(keys_with_plot)
            if start_idx_stats >= total_keys:
                continue  # Schon alles abgearbeitet
            finished = False
            f.write(f"==== {typ} ====\n")
            for idx, key in enumerate(keys_with_plot[start_idx_stats:], start=start_idx_stats):
                # Fortschritt speichern VOR der Auswertung!
                with open(progress_file_stats, "w") as pf:
                    pf.write(str(idx))
                    pf.flush()
                    os.fsync(pf.fileno())

                csd_list = csd_dict.get(key, [])
                goat_list = goat_dict.get(key, [])
                omol_list = omol_dict.get(key, []) if omol_dict else []

                csd_goat_overlap = overlap_count(csd_list, goat_list)
                omol_goat_overlap = overlap_count(omol_list, goat_list) if omol_dict else 0
                omol_csd_overlap = overlap_count(omol_list, csd_list) if omol_dict else 0

                csd_covered_by_goat = (csd_goat_overlap / len(csd_list) * 100) if len(csd_list) > 0 else 0

                n_csd = safe_len(csd_list)
                n_goat = safe_len(goat_list)
                n_omol = safe_len(omol_list)

                f.write(
                    f"{key}: "
                    f"CSD={n_csd}, GOAT={n_goat}, OMol25={n_omol} | "
                    f"CSD∩GOAT={csd_goat_overlap}, OMol∩GOAT={omol_goat_overlap}, OMol∩CSD={omol_csd_overlap} | "
                    f"CSD covered by GOAT: {csd_covered_by_goat:.1f}%\n"
                )
                counter += 1
                if counter >= stats_per_run:
                    print(f"Blocklimit {stats_per_run} erreicht. Fortschritt gespeichert bei Index {idx+1}.")
                    break
            f.write("\n")
            break  # Nur einen Typ pro Run bearbeiten, damit Fortschritt stimmt
        if finished or (counter < stats_per_run and not finished):
            print("Alle Statistiken wurden abgearbeitet!")
            with open(progress_file_stats, "w") as pf:
                pf.write("0")
                pf.flush()
                os.fsync(pf.fileno())
        else:
            print("Statistiken gespeichert in Plots/vergleich_statistiken.txt")
except KeyboardInterrupt:
    print("Abbruch durch Nutzer. Fortschritt wurde gespeichert und kann beim nächsten Lauf fortgesetzt werden.")